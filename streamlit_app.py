import streamlit as st
import pandas as pd
import plotly.express as px
import os
import sys

# Adiciona diret√≥rio atual ao path
sys.path.append('.')
try:
    from update_data import coletar_links, baixar_arquivos, processar_arquivos, analisar_e_salvar
except ImportError:
    st.error("Erro ao importar fun√ß√µes de update_data.py.")
    st.stop()

@st.cache_data
def update_and_load_data():
    st.write("üîÑ Atualizando dados...")
    try:
        file_links = coletar_links()
        downloaded_files = baixar_arquivos(file_links)
        all_dataframes = processar_arquivos(downloaded_files)
        analisar_e_salvar(all_dataframes)

        if not os.path.exists('monthy_selecionado.csv') or not os.path.exists('correlacoes_mensais.csv'):
            st.error("‚ùå Arquivos CSV n√£o encontrados. Verifique se o processamento foi conclu√≠do.")
            return pd.DataFrame(), pd.DataFrame()

    except Exception as e:
        st.error(f"üí• Erro na atualiza√ß√£o dos dados: {e}")
        return pd.DataFrame(), pd.DataFrame()

    try:
        monthy_selecionado_df = pd.read_csv('monthy_selecionado.csv')
        monthy_selecionado_df['Month'] = pd.to_datetime(monthy_selecionado_df['Month'], errors='coerce')
        monthy_selecionado_df.dropna(subset=['Month'], inplace=True)
        monthy_selecionado_df['Month_Str'] = monthy_selecionado_df['Month'].dt.strftime('%Y-%m')

        df_corr_local = pd.read_csv('correlacoes_mensais.csv')
        df_corr_local['Month'] = pd.to_datetime(df_corr_local['Month'], format='%Y-%m').dt.strftime('%Y-%m')

    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro ao carregar CSVs: {e}")
        return pd.DataFrame(), pd.DataFrame()

    return monthy_selecionado_df, df_corr_local

def display_attendance_dashboard(monthy_df):
    st.header("üìä Presen√ßa Mensal dos Dados")
    if not monthy_df.empty:
        node_id = st.selectbox("Selecione um Piez√¥metro (Presen√ßa):",
                       sorted(monthy_df["Node_ID"].unique()))
        def display_attendance_dashboard(monthy_df):
    st.header("üìä Presen√ßa Mensal dos Dados")

    if monthy_df.empty:
        st.warning("Nenhum dado dispon√≠vel para exibir.")
        return

    # Sele√ß√£o do piez√¥metro
    node_id = st.selectbox("Selecione um Piez√¥metro:", sorted(monthy_df["Node_ID"].unique()))

    # Filtra os dados para o piez√¥metro escolhido
    df_filtrado = monthy_df[monthy_df["Node_ID"] == node_id]

    if df_filtrado.empty:
        st.error(f"Nenhum dado encontrado para o Node {node_id}.")
        return

    # Cria gr√°fico de barras interativo com Plotly
    fig = px.bar(
        df_filtrado,
        x="Month_Str",
        y="Monthly_Attendance_Percentage",
        title=f"üìÖ Presen√ßa Mensal ‚Äì Node {node_id}",
        labels={
            "Month_Str": "M√™s",
            "Monthly_Attendance_Percentage": "Presen√ßa (%)"
        },
        color="Monthly_Attendance_Percentage",
        color_continuous_scale="Viridis"
    )
    fig.update_layout(xaxis_title="M√™s", yaxis_title="% de Presen√ßa", yaxis_range=[0, 100])

    # Exibe gr√°fico no Streamlit
    st.plotly_chart(fig, use_container_width=True)

    # Adiciona observa√ß√µes
    st.markdown("""
    ‚úÖ **Legenda**: A barra representa o percentual de dados dispon√≠veis por m√™s para o piez√¥metro selecionado.
    
    üí° Quanto mais alta a barra, maior a cobertura de dados. Ideal √© estar pr√≥ximo de 100%.
    """)
def display_correlation_dashboard(df_corr):
    st.header("üìà Correla√ß√£o Mensal: Press√£o vs Frequ√™ncia")

    if df_corr.empty:
        st.warning("Nenhum dado de correla√ß√£o dispon√≠vel.")
        return

    # Seleciona piez√¥metro
    node_id = st.selectbox("Selecione um Piez√¥metro (Correla√ß√£o):", sorted(df_corr["Node_ID"].unique()))

    # Filtra correla√ß√µes para o n√≥ escolhido
    df_filtrado = df_corr[df_corr["Node_ID"] == node_id]

    if df_filtrado.empty:
        st.error(f"Nenhum dado de correla√ß√£o encontrado para o Node {node_id}.")
        return

    # Cria gr√°fico interativo
    fig = px.line(
        df_filtrado,
        x="Month",
        y="Correlation",
        title=f"üìä Correla√ß√£o Mensal ‚Äì Node {node_id}",
        labels={"Month": "M√™s", "Correlation": "Correla√ß√£o"},
        markers=True
    )
    fig.update_layout(
        yaxis=dict(range=[-1, 1]),
        xaxis_title="M√™s",
        yaxis_title="Correla√ß√£o",
        hovermode="x unified"
    )

    # Exibe o gr√°fico
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    ‚ÑπÔ∏è **Interpreta√ß√£o**:
    - Valores pr√≥ximos de `+1` indicam forte correla√ß√£o positiva.
    - Valores pr√≥ximos de `-1` indicam correla√ß√£o negativa.
    - Valores pr√≥ximos de `0` indicam pouca ou nenhuma correla√ß√£o.

    üß† Isso ajuda a avaliar o comportamento conjunto das vari√°veis medidas pelos sensores.
    """)
def main():
    st.title("üîé An√°lise de Piez√¥metros")

    # Atualiza os dados e carrega os CSVs processados
    monthy_df, df_corr = update_and_load_data()

    # Cria abas para navega√ß√£o
    tab1, tab2 = st.tabs(["üìä Presen√ßa Mensal", "üìà Correla√ß√£o entre Vari√°veis"])

    with tab1:
        display_attendance_dashboard(monthy_df)

    with tab2:
        display_correlation_dashboard(df_corr)
if __name__ == "__main__":
    main()

